const e=(t,r)=>{for(const a in r)r[a]&&"object"==typeof r[a]&&!Array.isArray(r[a])?t[a]=e(t[a]||{},r[a]):t[a]=r[a];return t},t=(e,t)=>{Object.assign(e,t)},r=new TextEncoder,a=e=>r.encode(e),n=(e,r)=>{if(!e.includes("\n"))return void(r.readBuffer+=e);const[a,n]=e.split("\n");r.readBuffer+=a,(async e=>{try{return JSON.parse(e)}catch(e){return{id:-1,value:[],type:"error"}}})(r.readBuffer).then((e=>{if(void 0!==e.value){const{id:a,value:n}=e;r.debug.data={value:n,id:a},t(r,{value:n||[],id:a||-1}),r.rxtxEvent({id:r.id,value:r.value,getValueAt:e=>r.value[e]})}r.readBuffer=n||""})).catch((e=>console.log("Error parsing data:",e)))},o=async()=>{if(!("serial"in navigator))throw new Error("Web Serial API not supported.");return await navigator.serial.getPorts()},s=async()=>{try{return await navigator.serial.requestPort()}catch(e){return void console.log("Error selecting port:",e)}},i=async(e,r)=>{if(!e)return console.log("No port provided."),!1;try{await e.open({baudRate:r.baudRate});const a=new TextDecoderStream,n=(e.readable.pipeTo(a.writable),a.readable.getReader()),o=e.writable.getWriter();r.connectedPorts.push({thePort:e,reader:n,writer:o}),console.log("Serial communication established with",e.getInfo()),t(r,{connected:!0,port:e,reader:n,writer:o,io:!0})}catch(a){throw console.log("Error connecting to port:",a),l(e,r).then((()=>console.log("Resources cleaned up."))).catch(console.error),t(r,{connected:!1,port:e,reader:null,writer:null,io:!1}),new Error("Failed to connect")}return await c(r),!1},c=async e=>{try{for(;e.connected;){const{value:t,done:r}=await e.reader.read();if(r)break;t&&n(t,e)}}catch(e){throw console.log("Error during read:",e),e}finally{l(e.port,e).then((()=>console.log("Resources cleaned up."))).catch(console.error)}},l=async(e,t)=>{try{t.reader&&(await t.reader.cancel(),t.reader.releaseLock()),t.writer&&(await t.writer.close(),t.writer.releaseLock())}catch(e){console.log("Error during cleanup:",e)}},d=async e=>{if(0===(await o()).length)console.log("No previously granted ports detected, add connect button."),await u(e);else{console.log("Previously granted ports detected, wait to reconnect ..");try{await(async e=>{const t=await o();console.log("trying to reconnect to previous port(s)",t);for(const r of t)await i(r,e)})(e)}catch(t){console.log("couldn't reconnect to previously granted port(s)."),await u(e,!1)}}return e},u=async(e,t=!0)=>{const r=t?["#03a1ff","#06b004"]:["#ffa103","#666666"],a=createButton(t?"connect":"unavailable");a.position(20,20),a.style(`\n    background: ${r[0]};\n    color: #fff;\n    font-size: 16px;\n    margin: auto;\n    border: 0;\n    padding: 8px 32px;\n    border-radius: 32px;\n    transition: background 0.3s;\n  `),a.mouseOver((()=>a.style(`background: ${r[1]};`))),a.mouseOut((()=>a.style(`background: ${r[0]};`))),a.mousePressed((async()=>{a.remove();try{await(async e=>{e.readBuffer="";const t=await o();let r;return r=0===t.length?await s():t.length>0?t[0]:null,await i(r,e)})(e)}catch(t){console.log(`port is busy, ${t.message}`),u(e,!1)}}))};document.ontouchmove=e=>{e.preventDefault()};const g=e=>{if(!0===isKeyPressed){if(!1===e.isKeyPressed){if(e.isKeyPressed=!0,!e.mappedKeys.includes(key))return;switch(key){case"d":e.debug.show=!e.debug.show;break;case"f":fullscreen()||fullscreen(!0);break;case"p":e.debug.print=!e.debug.print;break;case"s":const t=`${e.image.label}_${(()=>{let e=year()+nf(month(),2)+nf(day(),2);return e+=nf(hour(),2)+nf(minute(),2)+nf(second(),2),e})()}.${e.image.format}`;console.log(`saving image ${t}`),saveCanvas(t,e.image.format);break;case"v":console.log("p5.rxtx 0.1.1 by sojamo")}}}else e.isKeyPressed=!1},p=e=>{e.debug.print&&(null==e.debug.data.value?console.log("debug.print, no data present yet."):console.log(e.debug.data.value))},f=e=>({width:400,height:40+20*e+20,spacing:20,header:40,footer:20,barLength:300}),h=e=>{const t=e.debug.data.value,r=e.range||[];e.range=P(t,r),t.forEach(((t,r)=>{e.range[r].min=t<e.range[r].min?t:e.range[r].min,e.range[r].max=t>e.range[r].max?t:e.range[r].max}))},b=(e,t)=>(e.debug.layer||(e.debug.layer=createGraphics(t.width,t.height),e.debug.layer.clear()),e.debug.layer),w=(e,t,r)=>{y(t,r),v(t,e.debug.data.id),m(t,e.debug.data.value,e.range,r),x(t,k())},y=(e,t)=>{e.clear(),e.noStroke(),e.fill(0,40),e.rect(0,0,t.width,t.height,16)},v=(e,t)=>{e.push(),e.translate(20,20),e.fill(255),e.text(`Device ${t}`,0,0),e.pop()},m=(e,t,r,a)=>{e.push(),e.translate(20,40),t.forEach(((t,n)=>{const o=map(t,r[n].min,r[n].max,0,1);e.push(),e.translate(0,n*a.spacing),e.fill(255,40),e.rect(0,0,a.barLength,10,4),e.fill(255,200),e.rect(0,2,o*a.barLength,8,4),e.fill(255),e.text(t.toFixed(2),a.barLength+20,10),e.pop()})),e.pop()},x=(e,t)=>{push(),t&&translate(-width/2,-height/2),translate(20,20),image(e,0,0),pop()},k=()=>drawingContext instanceof WebGLRenderingContext||drawingContext instanceof WebGL2RenderingContext,P=(e,t)=>{const r=e.length-t.length;if(r>0){const e=Array(r).fill().map((()=>({min:0,max:1})));t=[...t,...e]}else r<0&&(t=t.slice(0,value.length));return t},E={},R=async(r,a={})=>{((r,a,n)=>{const o={debug:{data:{}},connected:!1,io:null,isKeyPressed:!1,rxtxEvent:r.rxtxEvent||(e=>{}),readBuffer:"",connectedPorts:[]};t(n,e(e({baudRate:57600,id:-1,value:[],range:[],image:{label:"rxtx",format:"jpg"},mappedKeys:["d","f","p","s","v"],debug:{print:!1,show:!1}},a),o)),d(n)})(r,a,E)},$=()=>null!=E.debug.data.value,L=()=>E.connected,B=()=>null!=E.io,K=e=>{const t=j();return e>=t.length?-1:t[e]},j=()=>E.value||[],C=e=>{const t=JSON.stringify(e);(async(e,t)=>{!!(null==e?void 0:e.port)&&await e.writer.write(a(t))})(E,t)};var S,A,O;S=window,A=E,(O=S).p5?(O.p5.prototype.windowResized=()=>{resizeCanvas(windowWidth,windowHeight)},O.p5.prototype.registerMethod("post",(()=>g(A))),O.p5.prototype.registerMethod("post",(()=>(e=>{if(void 0===e.debug)return;if(p(e),!e.debug.show||!e.debug.data.value)return;const t=f(e.debug.data.value.length);h(e);const r=b(e,t);w(e,r,t)})(A)))):console.error("p5.js not found. Please include p5.js before this library.");export{R as connect,K as getValueAt,j as getValues,L as isConnectionEstablished,B as isReadyToSend,$ as isValuesAvailable,C as send};
//# sourceMappingURL=p5.rxtx.es.min.js.map
