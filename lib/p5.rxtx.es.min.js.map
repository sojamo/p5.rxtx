{"version":3,"file":"p5.rxtx.es.min.js","sources":["../src/rxtx.processing.js","../src/rxtx.debug.js","../src/rxtx.serial.js","../src/rxtx.window.js","../src/rxtx.keyboard.js","../src/rxtx.init.js","../src/main.js"],"sourcesContent":["export const parseStringToJSON = async (theString) => {\n  try {\n    let json = JSON.parse(theString);\n    return json;\n  } catch (error) {\n    return { id: -1 };\n  }\n}\n\nexport const parseStringToArray = (theData) => {\n  if (theData.charAt(0) == \"[\") {\n    let str0 = theData;\n    let str1 = str0.trim().replace(/[`\\[\\]\\\\\\/]/gi, \"\");\n    let arr0 = str1.split(\",\");\n    let arr1 = arr0.map(Number);\n    return arr1;\n  } else {\n    return float(theData);\n  }\n}\n\nexport const str2ab = (theString) => {\n  var buf = new ArrayBuffer(theString.length * 2); // 2 bytes for each char\n  var bufView = new Uint16Array(buf);\n  for (var i = 0, strLen = theString.length; i < strLen; i++) {\n    bufView[i] = theString.charCodeAt(i);\n  }\n  return buf;\n}\n\nexport const deepMerge = (target, source) => {\n  for (const key in source) {\n    if (\n      source[key] &&\n      typeof source[key] === 'object' &&\n      !Array.isArray(source[key])\n    ) {\n      target[key] = deepMerge(target[key] || {}, source[key]);\n    } else {\n      target[key] = source[key];\n    }\n  }\n  return target;\n}\n","\nexport const showRxtxDebug = (theState) => {\n  if (theState.debug.print) {\n    if (theState.debug.data.value == undefined) {\n      log(\"debug.print, no data present yet.\");\n    } else {\n      log(theState.debug.data.value);\n    }\n  }\n  if (!theState.debug.show || !theState.debug.data.value) return;\n\n  const isWEBGL = drawingContext instanceof WebGLRenderingContext;\n\n  if (!theState.debug.layer) {\n    theState.debug.layer = createGraphics(400, 200);\n    theState.debug.layer.clear();\n  } else {\n    const l = theState.debug.layer;\n    const v = theState.debug.data.value;\n    const id = theState.debug.data.id;\n\n    l.clear();\n    l.noStroke();\n    l.fill(0, 20);\n    l.rect(0, 0, 400, 200, 16);\n    l.push();\n    l.translate(20, 20);\n    l.fill(255);\n    l.text(`Device ${id}`, 0, 0);\n    l.translate(0, 20);\n    v.forEach((v, i) => {\n      let v0 = constrain(v, 0, 1);\n      l.push();\n      l.translate(0, i * 20);\n      l.fill(255, 40);\n      l.rect(0, 0, 300, 10, 4);\n      l.fill(255, 200);\n      l.rect(0, 2, v0 * 300, 8, 4);\n      l.fill(255);\n      l.text(v0.toFixed(2), 320, 10);\n      l.pop();\n    });\n    l.pop();\n  }\n\n  push();\n  if (isWEBGL) {\n    translate(-width / 2, -height / 2);\n  }\n  translate(20, 20);\n  image(theState.debug.layer, 0, 0);\n  pop();\n};\n\nexport const log = (...args) => {\n  console.log(\"rxtx debug : \", args.join(\" \"));\n};\n","import { parseStringToJSON } from \"./rxtx.processing\";\nimport { log } from \"./rxtx.debug\";\n\nexport const startRxtxWith = async (theState) => {\n  try {\n    await reconnectToPreviouslyGrantedPorts(theState);\n    return theState;\n  } catch (err) {\n    console.log(\"couldnt reconnect\");\n  }\n  const button = createButton(\"connect\");\n  button.position(20, 20);\n  button.style(\"background:#03a1ff\");\n  button.style(\"color:#fff\");\n  button.style(\"font-size:16px\");\n  button.style(\"margin:auto\");\n  button.style(\"border:0\");\n  button.style(\"padding:8px 32px\");\n  button.style(\"border-radius:32px\");\n  button.style(\"transition:background 0.3s\");\n  button.mouseOver(() => {\n    button.style(\"background:#06b004\");\n  });\n  button.mouseOut(() => {\n    button.style(\"background:#03a1ff\");\n  });\n\n  button.mousePressed(() => {\n    theState.fn = (val) => {\n      // console.log(\"debug: \" + val);\n    };\n    checkRxtxFor(theState);\n    button.remove();\n  });\n  return theState;\n};\n\nconst checkRxtxFor = async (theState) => {\n  if (\"serial\" in navigator) {\n    navigator.serial.getPorts().then((ports) => {\n      theState.readBuffer = \"\";\n      if (ports.length == 0) {\n        selectPort().then((port) => {\n          connectToPort(port, theState);\n        });\n      } else {\n        connectToPort(ports[0], theState);\n      }\n    });\n  }\n};\n\nconst selectPort = async () => {\n  const port = await navigator.serial.requestPort();\n  return port;\n};\n\nconst connectedPorts = [];\n\nconst connectToPort = async (thePort, theState) => {\n  console.log(thePort, theState)\n  try {\n    // Open the port with the given baud rate\n    await thePort.open({ baudRate: theState.baudRate });\n\n    // Set up text decoding for the readable stream\n    const decoder = new TextDecoderStream();\n    const inputDone = thePort.readable.pipeTo(decoder.writable);\n\n    // Retrieve reader and writer\n    const reader = decoder.readable.getReader();\n    const writer = thePort.writable.getWriter();\n\n    connectedPorts.push({ thePort, reader, writer });\n\n    // Log successful connection\n    log(\"Serial communication established with \", thePort.getInfo());\n\n    // Update the state\n    Object.assign(theState, {\n      connected: true,\n      port: thePort,\n      reader,\n      writer,\n      io: true, // @TODO: Decide if io is redundant\n    });\n\n    readFromPort(theState);\n\n    return { inputDone }; // Return the promise for tracking input stream completion\n  } catch (error) {\n    log(\"Error connecting to port:\", error);\n    throw error; // Rethrow error for upstream handling\n  }\n};\n\n// Automatically reconnect to previously granted ports\nexport const reconnectToPreviouslyGrantedPorts = async (theState) => {\n  const ports = await navigator.serial.getPorts();\n  console.log(\"trying to reconnect to previous ports\", ports);\n  for (const port of ports) {\n    await connectToPort(port, theState);\n  }\n}\n\n\nexport const rxtxWriteTo = async (theState, theData) => {\n  if (!theState?.port) return false;\n  await theState.writer.write(checkRxtxData(theData));\n  return true;\n};\n\nconst checkRxtxData = (theData) => {\n  // see sketch https://editor.p5js.org/sojamo/sketches/yXZauy17X\n  // to type check, then operate on theData accordingly\n  // and return expected type so that it can be interpreted\n  // by the receiving end, the Arduino.\n  return utf8EncodeText.encode(theData);\n};\n\nconst readFromPort = async (theState) => {\n  while (true) {\n    const { value, done } = await theState.reader.read();\n    if (value) {\n      if (!value.includes(\"\\n\")) {\n        // we received a chunk of data, add to\n        // the string buffer and wait for more data\n        // until \\n is detected\n        theState.readBuffer += value;\n      } else {\n        // we received a \\n, lets parse the String\n        // of data to JSON\n        const remainder = split(value, \"\\n\");\n        theState.readBuffer += remainder[0];\n        parseStringToJSON(theState.readBuffer).then((val) => {\n          // here we are passing on the received\n          // data to the sketch.\n          // @TODO\n          // check the received values against the previous\n          // values, if there are no changes, then\n          // retain from updating the sketch.\n          if (val.value !== undefined) {\n            theState.value = val.value || [];\n            theState.id = val.id || -1;\n            theState.debug.data = theState;\n            const data = { \"id\": theState.id, \"value\": theState.value };\n            theState.fn(data);\n            theState.rxtxEvent(data);\n          }\n          theState.readBuffer = remainder.length != 1 ? remainder[1] : \"\";\n        });\n      }\n    }\n    if (done) {\n      log(\"[readLoop] DONE\", done);\n      this.reader.releaseLock();\n      break;\n    }\n  }\n};","\nexport const enterFullscreen = () => {\n  var fs = fullscreen();\n  if (!fs) {\n    fullscreen(true);\n  }\n}\n\ndocument.ontouchmove = (event) => {\n  event.preventDefault();\n};\n","import { enterFullscreen } from \"./rxtx.window\";\n\n/**\n * \n * @param {*} theState \n */\nexport const keyPressed = (theState) => {\n\n  if (isKeyPressed === true) {\n    if (theState.isKeyPressed === false) {\n      theState.isKeyPressed = true;\n      switch (key) {\n        case \"f\":\n          enterFullscreen();\n          break;\n        case \"p\":\n          theState.debug.print = !theState.debug.print;\n          break;\n        case \"d\":\n          theState.debug.show = theState.debug.show ? true : false;\n          break;\n        case \"s\":\n          let t = \"\";\n          t = year() + nf(month(), 2) + nf(day(), 2);\n          t += nf(hour(), 2) + nf(minute(), 2) + nf(second(), 2);\n          let label = \"\";\n          label += theState.image.label;\n          label += \"_\" + t;\n          label += \".\" + theState.image.format;\n          log(`saving image ${label}`);\n          saveCanvas(label, rxtxProps.image.format);\n          break;\n      }\n    }\n  } else {\n    theState.isKeyPressed = false;\n  }\n};\n\n\n\n","import { deepMerge } from \"./rxtx.processing\";\nimport { startRxtxWith } from \"./rxtx.serial\";\nimport { keyPressed } from \"./rxtx.keyboard\";\nimport { showRxtxDebug } from \"./rxtx.debug\";\n\n/**\n * \n * @param {*} theApp \n * @param {*} theArgs \n * @param {*} theState \n */\nexport const initWith = (theApp, theArgs, theState) => {\n  const defaults = {\n    baudRate: 57600,\n    id: -1,\n    value: [],\n    fn: (ev) => {},\n    image: {\n      label: \"rxtx\",\n      format: \"jpg\",\n    },\n    debug: { print: false, show: false },\n  };\n\n  const internal = {\n    debug: { data: {} },\n    connected: false,\n    io: null,\n    isKeyPressed: false,\n    rxtxEvent: theApp.rxtxEvent || ((ev) => {}),\n    readBuffer: \"\"\n  };\n\n  Object.assign(theState, deepMerge(deepMerge(defaults, theArgs), internal));\n  startRxtxWith(theState);\n}\n\n/**\n * \n * @param {*} theInstance \n * @param {*} theState \n */\nexport const environmentCheck = (theInstance, theState) => {\n  (function (global) {\n    if (global.p5) {\n      global.p5.prototype.windowResized = () => {\n        resizeCanvas(windowWidth, windowHeight);\n      };\n  \n      global.p5.prototype.registerMethod(\"post\", () => keyPressed(theState));\n      global.p5.prototype.registerMethod(\"post\", () =>showRxtxDebug(theState));\n    } else {\n      console.error(\"p5.js not found. Please include p5.js before this library.\");\n    }\n  })(theInstance);\n}","import { environmentCheck, initWith } from \"./rxtx.init\";\n\n/**\n * \n * @param {*} theApp \n * @param {*} theArgs \n */\nexport const connect = async (theApp, theArgs = {}) => {\n  initWith(theApp, theArgs, state);\n};\n\n\n/**\n * \n * @returns \n */\nexport const isValuesAvailable = () => {\n  return state.debug.data.value == undefined ? false : true;\n};\n\n/**\n * \n * @returns \n */\nexport const isConnectionEstablished = () => {\n  return state.connected;\n};\n\n/**\n * \n * @returns \n */\nexport const isReadyToSend = () => {\n  return state.io != null;\n};\n\n/**\n * \n * @param {*} theIndex \n * @returns \n */\nexport const getValueAt = (theIndex) => {\n  const values = getValues();\n  return theIndex >= values.length ? -1 : values[theIndex];\n};\n\n/**\n * \n * @returns \n */\nexport const getValues = () => {\n  return state.value || [];\n};\n\nconst state = {};\n\nenvironmentCheck(window, state)\n"],"names":["parseStringToJSON","async","theString","JSON","parse","error","id","deepMerge","target","source","key","Array","isArray","log","args","console","join","checkRxtxFor","theState","navigator","serial","getPorts","then","ports","readBuffer","length","selectPort","port","connectToPort","requestPort","connectedPorts","thePort","open","baudRate","decoder","TextDecoderStream","inputDone","readable","pipeTo","writable","reader","getReader","writer","getWriter","push","log$1","getInfo","Object","assign","connected","io","readFromPort","reconnectToPreviouslyGrantedPorts","value","done","read","includes","remainder","split","val","debug","data","fn","rxtxEvent","this","releaseLock","document","ontouchmove","event","preventDefault","keyPressed","isKeyPressed","fullscreen","print","show","t","year","nf","month","day","hour","minute","second","label","image","format","saveCanvas","rxtxProps","initWith","theApp","theArgs","internal","ev","err","button","createButton","position","style","mouseOver","mouseOut","mousePressed","remove","startRxtxWith","connect","state","isValuesAvailable","isConnectionEstablished","isReadyToSend","getValueAt","theIndex","values","getValues","theInstance","global","window","p5","prototype","windowResized","resizeCanvas","windowWidth","windowHeight","registerMethod","isWEBGL","drawingContext","WebGLRenderingContext","layer","l","v","clear","noStroke","fill","rect","translate","text","forEach","i","v0","constrain","toFixed","pop","createGraphics","width","height","showRxtxDebug"],"mappings":"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"}