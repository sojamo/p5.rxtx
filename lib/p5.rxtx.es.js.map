{"version":3,"file":"p5.rxtx.es.js","sources":["../src/rxtx.processing.js","../src/rxtx.debug.js","../src/rxtx.serial.js","../src/rxtx.window.js","../src/rxtx.keyboard.js","../src/rxtx.init.js","../src/main.js"],"sourcesContent":["export const parseStringToJSON = async (theString) => {\n  try {\n    let json = JSON.parse(theString);\n    return json;\n  } catch (error) {\n    return { id: -1 };\n  }\n}\n\nexport const parseStringToArray = (theData) => {\n  if (theData.charAt(0) == \"[\") {\n    let str0 = theData;\n    let str1 = str0.trim().replace(/[`\\[\\]\\\\\\/]/gi, \"\");\n    let arr0 = str1.split(\",\");\n    let arr1 = arr0.map(Number);\n    return arr1;\n  } else {\n    return float(theData);\n  }\n}\n\nexport const str2ab = (theString) => {\n  var buf = new ArrayBuffer(theString.length * 2); // 2 bytes for each char\n  var bufView = new Uint16Array(buf);\n  for (var i = 0, strLen = theString.length; i < strLen; i++) {\n    bufView[i] = theString.charCodeAt(i);\n  }\n  return buf;\n}\n\nexport const deepMerge = (target, source) => {\n  for (const key in source) {\n    if (\n      source[key] &&\n      typeof source[key] === 'object' &&\n      !Array.isArray(source[key])\n    ) {\n      target[key] = deepMerge(target[key] || {}, source[key]);\n    } else {\n      target[key] = source[key];\n    }\n  }\n  return target;\n}\n","\nexport const showRxtxDebug = (theState) => {\n  if (theState.debug.print) {\n    if (theState.debug.data.value == undefined) {\n      log(\"debug.print, no data present yet.\");\n    } else {\n      log(theState.debug.data.value);\n    }\n  }\n  if (!theState.debug.show || !theState.debug.data.value) return;\n\n  const isWEBGL = drawingContext instanceof WebGLRenderingContext;\n\n  if (!theState.debug.layer) {\n    theState.debug.layer = createGraphics(400, 200);\n    theState.debug.layer.clear();\n  } else {\n    const l = theState.debug.layer;\n    const v = theState.debug.data.value;\n    const id = theState.debug.data.id;\n\n    l.clear();\n    l.noStroke();\n    l.fill(0, 20);\n    l.rect(0, 0, 400, 200, 16);\n    l.push();\n    l.translate(20, 20);\n    l.fill(255);\n    l.text(`Device ${id}`, 0, 0);\n    l.translate(0, 20);\n    v.forEach((v, i) => {\n      let v0 = constrain(v, 0, 1);\n      l.push();\n      l.translate(0, i * 20);\n      l.fill(255, 40);\n      l.rect(0, 0, 300, 10, 4);\n      l.fill(255, 200);\n      l.rect(0, 2, v0 * 300, 8, 4);\n      l.fill(255);\n      l.text(v0.toFixed(2), 320, 10);\n      l.pop();\n    });\n    l.pop();\n  }\n\n  push();\n  if (isWEBGL) {\n    translate(-width / 2, -height / 2);\n  }\n  translate(20, 20);\n  image(theState.debug.layer, 0, 0);\n  pop();\n};\n\nexport const log = (...args) => {\n  console.log(\"rxtx debug : \", args.join(\" \"));\n};\n","import { parseStringToJSON } from \"./rxtx.processing\";\nimport { log } from \"./rxtx.debug\";\n\nexport const startRxtxWith = async (theState) => {\n  try {\n    await reconnectToPreviouslyGrantedPorts(theState);\n    return theState;\n  } catch (err) {\n    console.log(\"couldnt reconnect\");\n  }\n  const button = createButton(\"connect\");\n  button.position(20, 20);\n  button.style(\"background:#03a1ff\");\n  button.style(\"color:#fff\");\n  button.style(\"font-size:16px\");\n  button.style(\"margin:auto\");\n  button.style(\"border:0\");\n  button.style(\"padding:8px 32px\");\n  button.style(\"border-radius:32px\");\n  button.style(\"transition:background 0.3s\");\n  button.mouseOver(() => {\n    button.style(\"background:#06b004\");\n  });\n  button.mouseOut(() => {\n    button.style(\"background:#03a1ff\");\n  });\n\n  button.mousePressed(() => {\n    theState.fn = (val) => {\n      // console.log(\"debug: \" + val);\n    };\n    checkRxtxFor(theState);\n    button.remove();\n  });\n  return theState;\n};\n\nconst checkRxtxFor = async (theState) => {\n  if (\"serial\" in navigator) {\n    navigator.serial.getPorts().then((ports) => {\n      theState.readBuffer = \"\";\n      if (ports.length == 0) {\n        selectPort().then((port) => {\n          connectToPort(port, theState);\n        });\n      } else {\n        connectToPort(ports[0], theState);\n      }\n    });\n  }\n};\n\nconst selectPort = async () => {\n  const port = await navigator.serial.requestPort();\n  return port;\n};\n\nconst connectedPorts = [];\n\nconst connectToPort = async (thePort, theState) => {\n  console.log(thePort, theState)\n  try {\n    // Open the port with the given baud rate\n    await thePort.open({ baudRate: theState.baudRate });\n\n    // Set up text decoding for the readable stream\n    const decoder = new TextDecoderStream();\n    const inputDone = thePort.readable.pipeTo(decoder.writable);\n\n    // Retrieve reader and writer\n    const reader = decoder.readable.getReader();\n    const writer = thePort.writable.getWriter();\n\n    connectedPorts.push({ thePort, reader, writer });\n\n    // Log successful connection\n    log(\"Serial communication established with \", thePort.getInfo());\n\n    // Update the state\n    Object.assign(theState, {\n      connected: true,\n      port: thePort,\n      reader,\n      writer,\n      io: true, // @TODO: Decide if io is redundant\n    });\n\n    readFromPort(theState);\n\n    return { inputDone }; // Return the promise for tracking input stream completion\n  } catch (error) {\n    log(\"Error connecting to port:\", error);\n    throw error; // Rethrow error for upstream handling\n  }\n};\n\n// Automatically reconnect to previously granted ports\nexport const reconnectToPreviouslyGrantedPorts = async (theState) => {\n  const ports = await navigator.serial.getPorts();\n  console.log(\"trying to reconnect to previous ports\", ports);\n  for (const port of ports) {\n    await connectToPort(port, theState);\n  }\n}\n\n\nexport const rxtxWriteTo = async (theState, theData) => {\n  if (!theState?.port) return false;\n  await theState.writer.write(checkRxtxData(theData));\n  return true;\n};\n\nconst checkRxtxData = (theData) => {\n  // see sketch https://editor.p5js.org/sojamo/sketches/yXZauy17X\n  // to type check, then operate on theData accordingly\n  // and return expected type so that it can be interpreted\n  // by the receiving end, the Arduino.\n  return utf8EncodeText.encode(theData);\n};\n\nconst readFromPort = async (theState) => {\n  while (true) {\n    const { value, done } = await theState.reader.read();\n    if (value) {\n      if (!value.includes(\"\\n\")) {\n        // we received a chunk of data, add to\n        // the string buffer and wait for more data\n        // until \\n is detected\n        theState.readBuffer += value;\n      } else {\n        // we received a \\n, lets parse the String\n        // of data to JSON\n        const remainder = split(value, \"\\n\");\n        theState.readBuffer += remainder[0];\n        parseStringToJSON(theState.readBuffer).then((val) => {\n          // here we are passing on the received\n          // data to the sketch.\n          // @TODO\n          // check the received values against the previous\n          // values, if there are no changes, then\n          // retain from updating the sketch.\n          if (val.value !== undefined) {\n            theState.value = val.value || [];\n            theState.id = val.id || -1;\n            theState.debug.data = theState;\n            const data = { \"id\": theState.id, \"value\": theState.value };\n            theState.fn(data);\n            theState.rxtxEvent(data);\n          }\n          theState.readBuffer = remainder.length != 1 ? remainder[1] : \"\";\n        });\n      }\n    }\n    if (done) {\n      log(\"[readLoop] DONE\", done);\n      this.reader.releaseLock();\n      break;\n    }\n  }\n};","\nexport const enterFullscreen = () => {\n  var fs = fullscreen();\n  if (!fs) {\n    fullscreen(true);\n  }\n}\n\ndocument.ontouchmove = (event) => {\n  event.preventDefault();\n};\n","import { enterFullscreen } from \"./rxtx.window\";\n\n/**\n * \n * @param {*} theState \n */\nexport const keyPressed = (theState) => {\n\n  if (isKeyPressed === true) {\n    if (theState.isKeyPressed === false) {\n      theState.isKeyPressed = true;\n      switch (key) {\n        case \"f\":\n          enterFullscreen();\n          break;\n        case \"p\":\n          theState.debug.print = !theState.debug.print;\n          break;\n        case \"d\":\n          theState.debug.show = theState.debug.show ? true : false;\n          break;\n        case \"s\":\n          let t = \"\";\n          t = year() + nf(month(), 2) + nf(day(), 2);\n          t += nf(hour(), 2) + nf(minute(), 2) + nf(second(), 2);\n          let label = \"\";\n          label += theState.image.label;\n          label += \"_\" + t;\n          label += \".\" + theState.image.format;\n          log(`saving image ${label}`);\n          saveCanvas(label, rxtxProps.image.format);\n          break;\n      }\n    }\n  } else {\n    theState.isKeyPressed = false;\n  }\n};\n\n\n\n","import { deepMerge } from \"./rxtx.processing\";\nimport { startRxtxWith } from \"./rxtx.serial\";\nimport { keyPressed } from \"./rxtx.keyboard\";\nimport { showRxtxDebug } from \"./rxtx.debug\";\n\n/**\n * \n * @param {*} theApp \n * @param {*} theArgs \n * @param {*} theState \n */\nexport const initWith = (theApp, theArgs, theState) => {\n  const defaults = {\n    baudRate: 57600,\n    id: -1,\n    value: [],\n    fn: (ev) => {},\n    image: {\n      label: \"rxtx\",\n      format: \"jpg\",\n    },\n    debug: { print: false, show: false },\n  };\n\n  const internal = {\n    debug: { data: {} },\n    connected: false,\n    io: null,\n    isKeyPressed: false,\n    rxtxEvent: theApp.rxtxEvent || ((ev) => {}),\n    readBuffer: \"\"\n  };\n\n  Object.assign(theState, deepMerge(deepMerge(defaults, theArgs), internal));\n  startRxtxWith(theState);\n}\n\n/**\n * \n * @param {*} theInstance \n * @param {*} theState \n */\nexport const environmentCheck = (theInstance, theState) => {\n  (function (global) {\n    if (global.p5) {\n      global.p5.prototype.windowResized = () => {\n        resizeCanvas(windowWidth, windowHeight);\n      };\n  \n      global.p5.prototype.registerMethod(\"post\", () => keyPressed(theState));\n      global.p5.prototype.registerMethod(\"post\", () =>showRxtxDebug(theState));\n    } else {\n      console.error(\"p5.js not found. Please include p5.js before this library.\");\n    }\n  })(theInstance);\n}","import { environmentCheck, initWith } from \"./rxtx.init\";\n\n/**\n * \n * @param {*} theApp \n * @param {*} theArgs \n */\nexport const connect = async (theApp, theArgs = {}) => {\n  initWith(theApp, theArgs, state);\n};\n\n\n/**\n * \n * @returns \n */\nexport const isValuesAvailable = () => {\n  return state.debug.data.value == undefined ? false : true;\n};\n\n/**\n * \n * @returns \n */\nexport const isConnectionEstablished = () => {\n  return state.connected;\n};\n\n/**\n * \n * @returns \n */\nexport const isReadyToSend = () => {\n  return state.io != null;\n};\n\n/**\n * \n * @param {*} theIndex \n * @returns \n */\nexport const getValueAt = (theIndex) => {\n  const values = getValues();\n  return theIndex >= values.length ? -1 : values[theIndex];\n};\n\n/**\n * \n * @returns \n */\nexport const getValues = () => {\n  return state.value || [];\n};\n\nconst state = {};\n\nenvironmentCheck(window, state)\n"],"names":["key","log","v","this"],"mappings":"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"}