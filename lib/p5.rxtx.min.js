var rxtx=function(e){"use strict";const t=async e=>{try{return JSON.parse(e)}catch(e){return{id:-1}}},a=(e,t)=>{for(const r in t)t[r]&&"object"==typeof t[r]&&!Array.isArray(t[r])?e[r]=a(e[r]||{},t[r]):e[r]=t[r];return e},r=(...e)=>{console.log("rxtx debug : ",e.join(" "))},n=async e=>{"serial"in navigator&&navigator.serial.getPorts().then((t=>{e.readBuffer="",0==t.length?o().then((t=>{i(t,e)})):i(t[0],e)}))},o=async()=>await navigator.serial.requestPort(),s=[],i=async(e,t)=>{console.log(e,t);try{await e.open({baudRate:t.baudRate});const a=new TextDecoderStream,n=e.readable.pipeTo(a.writable),o=a.readable.getReader(),i=e.writable.getWriter();return s.push({thePort:e,reader:o,writer:i}),r("Serial communication established with ",e.getInfo()),Object.assign(t,{connected:!0,port:e,reader:o,writer:i,io:!0}),d(t),{inputDone:n}}catch(e){throw r("Error connecting to port:",e),e}},l=async e=>{const t=await navigator.serial.getPorts();console.log("trying to reconnect to previous ports",t);for(const a of t)await i(a,e)},d=async e=>{for(;;){const{value:a,done:n}=await e.reader.read();if(a)if(a.includes("\n")){const r=split(a,"\n");e.readBuffer+=r[0],t(e.readBuffer).then((t=>{if(void 0!==t.value){e.value=t.value||[],e.id=t.id||-1,e.debug.data=e;const a={id:e.id,value:e.value};e.fn(a),e.rxtxEvent(a)}e.readBuffer=1!=r.length?r[1]:""}))}else e.readBuffer+=a;if(n){r("[readLoop] DONE",n),(void 0).reader.releaseLock();break}}};document.ontouchmove=e=>{e.preventDefault()};const u=e=>{if(!0===isKeyPressed){if(!1===e.isKeyPressed)switch(e.isKeyPressed=!0,key){case"f":fullscreen()||fullscreen(!0);break;case"p":e.debug.print=!e.debug.print;break;case"d":e.debug.show=!!e.debug.show;break;case"s":let t="";t=year()+nf(month(),2)+nf(day(),2),t+=nf(hour(),2)+nf(minute(),2)+nf(second(),2);let a="";a+=e.image.label,a+="_"+t,a+="."+e.image.format,log(`saving image ${a}`),saveCanvas(a,rxtxProps.image.format)}}else e.isKeyPressed=!1},c=(e,t,r)=>{const o={debug:{data:{}},connected:!1,io:null,isKeyPressed:!1,rxtxEvent:e.rxtxEvent||(e=>{}),readBuffer:""};Object.assign(r,a(a({baudRate:57600,id:-1,value:[],fn:e=>{},image:{label:"rxtx",format:"jpg"},debug:{print:!1,show:!1}},t),o)),(async e=>{try{return await l(e),e}catch(e){console.log("couldnt reconnect")}const t=createButton("connect");t.position(20,20),t.style("background:#03a1ff"),t.style("color:#fff"),t.style("font-size:16px"),t.style("margin:auto"),t.style("border:0"),t.style("padding:8px 32px"),t.style("border-radius:32px"),t.style("transition:background 0.3s"),t.mouseOver((()=>{t.style("background:#06b004")})),t.mouseOut((()=>{t.style("background:#03a1ff")})),t.mousePressed((()=>{e.fn=e=>{},n(e),t.remove()}))})(r)},g=()=>f.value||[],f={};var p,b,y;return p=window,b=f,(y=p).p5?(y.p5.prototype.windowResized=()=>{resizeCanvas(windowWidth,windowHeight)},y.p5.prototype.registerMethod("post",(()=>u(b))),y.p5.prototype.registerMethod("post",(()=>(e=>{if(e.debug.print&&(null==e.debug.data.value?r("debug.print, no data present yet."):r(e.debug.data.value)),!e.debug.show||!e.debug.data.value)return;const t=drawingContext instanceof WebGLRenderingContext;if(e.debug.layer){const t=e.debug.layer,a=e.debug.data.value,r=e.debug.data.id;t.clear(),t.noStroke(),t.fill(0,20),t.rect(0,0,400,200,16),t.push(),t.translate(20,20),t.fill(255),t.text(`Device ${r}`,0,0),t.translate(0,20),a.forEach(((e,a)=>{let r=constrain(e,0,1);t.push(),t.translate(0,20*a),t.fill(255,40),t.rect(0,0,300,10,4),t.fill(255,200),t.rect(0,2,300*r,8,4),t.fill(255),t.text(r.toFixed(2),320,10),t.pop()})),t.pop()}else e.debug.layer=createGraphics(400,200),e.debug.layer.clear();push(),t&&translate(-width/2,-height/2),translate(20,20),image(e.debug.layer,0,0),pop()})(b)))):console.error("p5.js not found. Please include p5.js before this library."),e.connect=async(e,t={})=>{c(e,t,f)},e.getValueAt=e=>{const t=g();return e>=t.length?-1:t[e]},e.getValues=g,e.isConnectionEstablished=()=>f.connected,e.isReadyToSend=()=>null!=f.io,e.isValuesAvailable=()=>null!=f.debug.data.value,Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),e}({});
//# sourceMappingURL=p5.rxtx.min.js.map
