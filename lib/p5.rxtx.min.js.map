{"version":3,"file":"p5.rxtx.min.js","sources":["../src/rxtx.processing.js","../src/rxtx.debug.js","../src/rxtx.serial.js","../src/rxtx.window.js","../src/rxtx.keyboard.js","../src/rxtx.init.js","../src/main.js"],"sourcesContent":["export const parseStringToJSON = async (theString) => {\n  try {\n    let json = JSON.parse(theString);\n    return json;\n  } catch (error) {\n    return { id: -1 };\n  }\n}\n\nexport const parseStringToArray = (theData) => {\n  if (theData.charAt(0) == \"[\") {\n    let str0 = theData;\n    let str1 = str0.trim().replace(/[`\\[\\]\\\\\\/]/gi, \"\");\n    let arr0 = str1.split(\",\");\n    let arr1 = arr0.map(Number);\n    return arr1;\n  } else {\n    return float(theData);\n  }\n}\n\nexport const str2ab = (theString) => {\n  var buf = new ArrayBuffer(theString.length * 2); // 2 bytes for each char\n  var bufView = new Uint16Array(buf);\n  for (var i = 0, strLen = theString.length; i < strLen; i++) {\n    bufView[i] = theString.charCodeAt(i);\n  }\n  return buf;\n}\n\nexport const deepMerge = (target, source) => {\n  for (const key in source) {\n    if (\n      source[key] &&\n      typeof source[key] === 'object' &&\n      !Array.isArray(source[key])\n    ) {\n      target[key] = deepMerge(target[key] || {}, source[key]);\n    } else {\n      target[key] = source[key];\n    }\n  }\n  return target;\n}\n","\nexport const showRxtxDebug = (theState) => {\n  if (theState.debug.print) {\n    if (theState.debug.data.value == undefined) {\n      log(\"debug.print, no data present yet.\");\n    } else {\n      log(theState.debug.data.value);\n    }\n  }\n  if (!theState.debug.show || !theState.debug.data.value) return;\n\n  const isWEBGL = drawingContext instanceof WebGLRenderingContext;\n\n  if (!theState.debug.layer) {\n    theState.debug.layer = createGraphics(400, 200);\n    theState.debug.layer.clear();\n  } else {\n    const l = theState.debug.layer;\n    const v = theState.debug.data.value;\n    const id = theState.debug.data.id;\n\n    l.clear();\n    l.noStroke();\n    l.fill(0, 20);\n    l.rect(0, 0, 400, 200, 16);\n    l.push();\n    l.translate(20, 20);\n    l.fill(255);\n    l.text(`Device ${id}`, 0, 0);\n    l.translate(0, 20);\n    v.forEach((v, i) => {\n      let v0 = constrain(v, 0, 1);\n      l.push();\n      l.translate(0, i * 20);\n      l.fill(255, 40);\n      l.rect(0, 0, 300, 10, 4);\n      l.fill(255, 200);\n      l.rect(0, 2, v0 * 300, 8, 4);\n      l.fill(255);\n      l.text(v0.toFixed(2), 320, 10);\n      l.pop();\n    });\n    l.pop();\n  }\n\n  push();\n  if (isWEBGL) {\n    translate(-width / 2, -height / 2);\n  }\n  translate(20, 20);\n  image(theState.debug.layer, 0, 0);\n  pop();\n};\n\nexport const log = (...args) => {\n  console.log(\"rxtx debug : \", args.join(\" \"));\n};\n","import { parseStringToJSON } from \"./rxtx.processing\";\nimport { log } from \"./rxtx.debug\";\n\nexport const startRxtxWith = (theState) => {\n  const button = createButton(\"connect\");\n  button.position(20, 20);\n  button.style(\"background:#03a1ff\");\n  button.style(\"color:#fff\");\n  button.style(\"font-size:16px\");\n  button.style(\"margin:auto\");\n  button.style(\"border:0\");\n  button.style(\"padding:8px 32px\");\n  button.style(\"border-radius:32px\");\n  button.style(\"transition:background 0.3s\");\n  button.mouseOver(() => {\n    button.style(\"background:#06b004\");\n  });\n  button.mouseOut(() => {\n    button.style(\"background:#03a1ff\");\n  });\n\n  button.mousePressed(() => {\n    theState.fn = (val) => {\n      // console.log(\"debug: \" + val);\n    };\n    checkRxtxFor(theState);\n    button.remove();\n  });\n  return theState;\n};\n\nconst checkRxtxFor = async (theState) => {\n  if (\"serial\" in navigator) {\n    navigator.serial.getPorts().then((ports) => {\n      theState.readBuffer = \"\";\n      if (ports.length == 0) {\n        selectPort().then((port) => {\n          connectToPort(port, theState);\n        });\n      } else {\n        connectToPort(ports[0], theState);\n      }\n    });\n  }\n};\n\nconst selectPort = async () => {\n  const port = await navigator.serial.requestPort();\n  return port;\n};\n\nconst connectToPort = async (thePort, theState) => {\n  try {\n    // Open the port with the given baud rate\n    await thePort.open({ baudRate: theState.baudRate });\n\n    // Set up text decoding for the readable stream\n    const decoder = new TextDecoderStream();\n    const inputDone = thePort.readable.pipeTo(decoder.writable);\n\n    // Retrieve reader and writer\n    const reader = decoder.readable.getReader();\n    const writer = thePort.writable.getWriter();\n\n    // Log successful connection\n    log(\"Serial communication established\", thePort.getInfo());\n\n    // Update the state\n    Object.assign(theState, {\n      connected: true,\n      port: thePort,\n      reader,\n      writer,\n      io: true, // @TODO: Decide if io is redundant\n    });\n\n    readLoopFor(theState);\n\n    return { inputDone }; // Return the promise for tracking input stream completion\n  } catch (error) {\n    log(\"Error connecting to port:\", error);\n    throw error; // Rethrow error for upstream handling\n  }\n};\n\nexport const rxtxWriteTo = async (theState, theData) => {\n  if (!theState?.port) return false;\n  await theState.writer.write(checkRxtxData(theData));\n  return true;\n};\n\nconst checkRxtxData = (theData) => {\n  // see sketch https://editor.p5js.org/sojamo/sketches/yXZauy17X\n  // to type check, then operate on theData accordingly\n  // and return expected type so that it can be interpreted\n  // by the receiving end, the Arduino.\n  return utf8EncodeText.encode(theData);\n};\n\nconst readLoopFor = async (theState) => {\n  while (true) {\n    const { value, done } = await theState.reader.read();\n    if (value) {\n      if (!value.includes(\"\\n\")) {\n        // we received a chunk of data, add to\n        // the string buffer and wait for more data\n        // until \\n is detected\n        theState.readBuffer += value;\n      } else {\n        // we received a \\n, lets parse the String\n        // of data to JSON\n        const remainder = split(value, \"\\n\");\n        theState.readBuffer += remainder[0];\n        parseStringToJSON(theState.readBuffer).then((val) => {\n          // here we are passing on the received\n          // data to the sketch.\n          // @TODO\n          // check the received values against the previous\n          // values, if there are no changes, then\n          // retain from updating the sketch.\n          if (val.value !== undefined) {\n            theState.value = val.value || [];\n            theState.id = val.id || -1;\n            theState.debug.data = theState;\n            const data = { \"id\": theState.id, \"value\": theState.value };\n            theState.fn(data);\n            theState.rxtxEvent(data);\n          }\n          theState.readBuffer = remainder.length != 1 ? remainder[1] : \"\";\n        });\n      }\n    }\n    if (done) {\n      log(\"[readLoop] DONE\", done);\n      this.reader.releaseLock();\n      break;\n    }\n  }\n};\n","\nexport const enterFullscreen = () => {\n  var fs = fullscreen();\n  if (!fs) {\n    fullscreen(true);\n  }\n}\n\ndocument.ontouchmove = (event) => {\n  event.preventDefault();\n};\n\n","import { enterFullscreen } from \"./rxtx.window\";\n\nexport const keyPressed = (theState) => {\n\n  if (isKeyPressed === true) {\n    if (theState.isKeyPressed === false) {\n      theState.isKeyPressed = true;\n      switch (key) {\n        case \"f\":\n          enterFullscreen();\n          break;\n        case \"p\":\n          theState.debug.print = !theState.debug.print;\n          break;\n        case \"d\":\n          theState.debug.show = theState.debug.show ? true : false;\n          break;\n        case \"s\":\n          let t = \"\";\n          t = year() + nf(month(), 2) + nf(day(), 2);\n          t += nf(hour(), 2) + nf(minute(), 2) + nf(second(), 2);\n          let label = \"\";\n          label += theState.image.label;\n          label += \"_\" + t;\n          label += \".\" + theState.image.format;\n          log(`saving image ${label}`);\n          saveCanvas(label, rxtxProps.image.format);\n          break;\n      }\n    }\n  } else {\n    theState.isKeyPressed = false;\n  }\n};\n\n\n\n","import { deepMerge } from \"./rxtx.processing\";\nimport { startRxtxWith } from \"./rxtx.serial\";\nimport { keyPressed } from \"./rxtx.keyboard\";\nimport { showRxtxDebug } from \"./rxtx.debug\";\n\n/**\n * \n * @param {*} theApp \n * @param {*} theArgs \n * @param {*} theState \n */\nexport const initWith = (theApp, theArgs, theState) => {\n  const defaults = {\n    baudRate: 57600,\n    id: -1,\n    value: [],\n    fn: (ev) => {},\n    image: {\n      label: \"rxtx\",\n      format: \"jpg\",\n    },\n    debug: { print: false, show: false },\n  };\n\n  const internal = {\n    debug: { data: {} },\n    connected: false,\n    io: null,\n    \"isKeyPressed\": false,\n    \"rxtxEvent\": theApp.rxtxEvent || ((ev) => {}),\n  };\n\n  Object.assign(theState, deepMerge(deepMerge(defaults, theArgs), internal));\n  startRxtxWith(theState);\n}\n\n/**\n * \n * @param {*} theInstance \n * @param {*} theState \n */\nexport const environmentCheck = (theInstance, theState) => {\n  (function (global) {\n    if (global.p5) {\n      global.p5.prototype.windowResized = () => {\n        resizeCanvas(windowWidth, windowHeight);\n      };\n  \n      global.p5.prototype.registerMethod(\"post\", () => keyPressed(theState));\n      global.p5.prototype.registerMethod(\"post\", () =>showRxtxDebug(theState));\n    } else {\n      console.error(\"p5.js not found. Please include p5.js before this library.\");\n    }\n  })(theInstance);\n}","import { environmentCheck, initWith } from \"./rxtx.init\";\n\n\n/**\n * \n * @param {*} theApp \n * @param {*} theArgs \n */\nexport const connect = (theApp, theArgs = {}) => {\n  initWith(theApp, theArgs, state);\n};\n\n\n/**\n * \n * @returns \n */\nexport const isValuesAvailable = () => {\n  return state.debug.data.value == undefined ? false : true;\n};\n\n/**\n * \n * @returns \n */\nexport const isConnectionEstablished = () => {\n  return state.connected;\n};\n\n/**\n * \n * @returns \n */\nexport const isReadyToSend = () => {\n  return state.io != null;\n};\n\n/**\n * \n * @param {*} theIndex \n * @returns \n */\nexport const getValueAt = (theIndex) => {\n  const values = getValues();\n  return theIndex >= values.length ? -1 : values[theIndex];\n};\n\n/**\n * \n * @returns \n */\nexport const getValues = () => {\n  return state.value || [];\n};\n\nconst state = {};\n\nenvironmentCheck(window, state)\n"],"names":["parseStringToJSON","async","theString","JSON","parse","error","id","deepMerge","target","source","key","Array","isArray","log","args","console","join","checkRxtxFor","theState","navigator","serial","getPorts","then","ports","readBuffer","length","selectPort","port","connectToPort","requestPort","thePort","open","baudRate","decoder","TextDecoderStream","inputDone","readable","pipeTo","writable","reader","getReader","writer","getWriter","log$1","getInfo","Object","assign","connected","io","readLoopFor","value","done","read","includes","remainder","split","val","debug","data","fn","rxtxEvent","this","releaseLock","document","ontouchmove","event","preventDefault","keyPressed","isKeyPressed","fullscreen","print","show","t","year","nf","month","day","hour","minute","second","label","image","format","saveCanvas","rxtxProps","initWith","theApp","theArgs","internal","ev","button","createButton","position","style","mouseOver","mouseOut","mousePressed","remove","startRxtxWith","getValues","state","theInstance","global","window","p5","prototype","windowResized","resizeCanvas","windowWidth","windowHeight","registerMethod","isWEBGL","drawingContext","WebGLRenderingContext","layer","l","v","clear","noStroke","fill","rect","push","translate","text","forEach","i","v0","constrain","toFixed","pop","createGraphics","width","height","showRxtxDebug","theIndex","values"],"mappings":"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"}